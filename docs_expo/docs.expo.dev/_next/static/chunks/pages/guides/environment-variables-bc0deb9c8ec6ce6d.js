(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[18209],{5705:(e,n,i)=>{"use strict";i.r(n),i.d(n,{__N_SSG:()=>s,default:()=>d,headings:()=>a,meta:()=>l});var t=i(37876),r=i(91668),o=i(66961),s=!0;let l={modificationDate:"March 24, 2025",title:"Environment variables in Expo",sidebar_title:"Environment variables",description:"Learn how to use environment variables in an Expo project."},a=[{depth:2,type:"text",title:"Reading environment variables from .env files"},{depth:3,type:"text",title:"How variables are loaded"},{depth:3,type:"text",title:"How to read from environment variables"},{depth:3,type:"text",title:"Using multiple .env files to define separate environments"},{depth:4,type:"inlineCode",title:"Environment variables and  NODE_ENV"},{depth:3,type:"text",title:"Disabling environment variables"},{depth:2,type:"text",title:"Environment variables in Expo Application Services"},{depth:3,type:"text",title:"EAS Build"},{depth:3,type:"text",title:"EAS Update"},{depth:2,type:"text",title:"Migrating to Expo environment variables"},{depth:3,type:"text",title:"From react-native-config"},{depth:3,type:"text",title:"From babel-plugin-transform-inline-environment-variables"},{depth:3,type:"text",title:"From direnv"},{depth:2,type:"text",title:"Security considerations"}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Environment variables are key-value pairs configured outside your source code that allow your app to behave differently depending on the environment. For example, you can enable or disable certain features when building a test version of your app, or switch to a different API endpoint when building for production."}),"\n",(0,t.jsxs)(n.p,{children:["The Expo CLI will automatically load environment variables with an ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," prefix from ",(0,t.jsx)(n.strong,{children:".env"})," files for use within your JavaScript code whenever you use the Expo CLI, such as when running ",(0,t.jsx)(n.code,{children:"npx expo start"})," to start your app in local development mode."]}),"\n",(0,t.jsx)(n.h2,{id:"reading-environment-variables-from-env-files",children:"Reading environment variables from .env files"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.strong,{children:".env"})," file in the root of your project directory and add environment-specific variables on new lines in the form of ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_[NAME]=VALUE"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"@@@.env@@@EXPO_PUBLIC_API_URL=https://staging.example.com\nEXPO_PUBLIC_API_KEY=abc123\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now you can use environment variables directly in your source code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Button } from 'react-native';\n\nfunction Post() {\n  const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n\n  async function onPress() {\n    await fetch(apiUrl, { ... })\n  }\n\n  return <Button onPress={onPress} title=\"Post\" />;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When you run ",(0,t.jsx)(n.code,{children:"npx expo start"}),", ",(0,t.jsx)(n.code,{children:"process.env.EXPO_PUBLIC_API_URL"})," will be replaced with ",(0,t.jsx)(n.code,{children:"https://staging.example.com"})," in your app bundle. Variables can be updated as you edit your code without restarting the Expo CLI or clearing the cache. You will need to perform a full reload (for example, shake gesture and then Reload in Expo Go or your development build) to see the updated value."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"warning"})," Do not store sensitive info, such as private keys, in ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," variables. These variables will be visible in plain-text in your compiled application."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-variables-are-loaded",children:"How variables are loaded"}),"\n",(0,t.jsxs)(n.p,{children:["Expo CLI loads ",(0,t.jsx)(n.strong,{children:".env"})," files according to the ",(0,t.jsx)(n.a,{href:"https://github.com/bkeepers/dotenv/blob/c6e583a/README.md#what-other-env-files-can-i-use",children:"standard .env file resolution"})," and then replaces all references in your code to ",(0,t.jsx)(n.code,{children:"process.env.EXPO_PUBLIC_[VARNAME]"})," with the corresponding value set in the ",(0,t.jsx)(n.strong,{children:".env"})," files. Code inside ",(0,t.jsx)(n.strong,{children:"node_modules"})," is not affected for security purposes."]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-read-from-environment-variables",children:"How to read from environment variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(o.jp,{small:!0})," ",(0,t.jsxs)(n.strong,{children:["Every environment variable must be statically referenced as a property of\n",(0,t.jsx)(n.code,{children:"process.env"})," using JavaScript's dot notation for it to be inlined."]})," For example, the expression\n",(0,t.jsx)(n.code,{children:"process.env.EXPO_PUBLIC_KEY"})," is valid and will be inlined."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(o.xf,{small:!0})," ",(0,t.jsx)(n.strong,{children:"Alternative versions of the expression are not supported"}),". For example,\n",(0,t.jsx)(n.code,{children:"process.env['EXPO_PUBLIC_KEY']"})," or ",(0,t.jsx)(n.code,{children:"const {EXPO_PUBLIC_X} = process.env"})," is invalid and will not\nbe inlined."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-multiple-env-files-to-define-separate-environments",children:"Using multiple .env files to define separate environments"}),"\n",(0,t.jsxs)(n.p,{children:["You can define any of the ",(0,t.jsx)(n.a,{href:"https://github.com/bkeepers/dotenv/blob/c6e583a/README.md#what-other-env-files-can-i-use",children:"standard .env files"}),", so it is possible to have separate ",(0,t.jsx)(n.strong,{children:".env"})," and ",(0,t.jsx)(n.strong,{children:".env.local"}),", files and they will load according to the standard priority."]}),"\n",(0,t.jsxs)(n.p,{children:["You may choose to commit the default ",(0,t.jsx)(n.strong,{children:".env"})," file or other standard configurations, but generally ",(0,t.jsx)(n.strong,{children:".env.local"})," files should be added to your ",(0,t.jsx)(n.strong,{children:".gitignore"}),", because they are used to specify environment configuration specific to your local machine (such as, for example, your network IP address if you need it to make a request against a local server)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"@@@.gitignore@@@.env*.local\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"environment-variables-and-node_env",children:["Environment variables and ",(0,t.jsx)(n.code,{children:"NODE_ENV"})]}),"\n",(0,t.jsxs)(n.p,{children:["We recommend against using ",(0,t.jsx)(n.code,{children:"NODE_ENV"})," to switch between ",(0,t.jsx)(n.strong,{children:".env"})," files (such as ",(0,t.jsx)(n.strong,{children:".env.test"})," and ",(0,t.jsx)(n.strong,{children:".env.production"}),"). While it is technically possible (",(0,t.jsx)(n.code,{children:"NODE_ENV=test npx expo start"})," will load ",(0,t.jsx)(n.strong,{children:".env.test"}),") — it may not behave as you would expect. For example, ",(0,t.jsx)(n.code,{children:"npx expo export"})," always forces ",(0,t.jsx)(n.code,{children:"NODE_ENV"})," to ",(0,t.jsx)(n.code,{children:"production"}),", so ",(0,t.jsx)(n.code,{children:"NODE_ENV=test npx expo export"})," will not actually run the command with the ",(0,t.jsx)(n.code,{children:"NODE_ENV"})," set to ",(0,t.jsx)(n.code,{children:"test"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Other tools that build on top of Expo CLI commands will exhibit the same behavior — for example, ",(0,t.jsx)(n.code,{children:"eas update"})," calls into ",(0,t.jsx)(n.code,{children:"npx expo export"})," and, as a result, ",(0,t.jsx)(n.code,{children:"NODE_ENV=test eas update"})," will similarly not run with the ",(0,t.jsx)(n.code,{children:"NODE_ENV"})," set to ",(0,t.jsx)(n.code,{children:"test"})," (it will be ",(0,t.jsx)(n.code,{children:"production"}),"). The ",(0,t.jsx)(n.code,{children:"NODE_ENV"})," environment variable is used by many tools in different ways (for example, if you run ",(0,t.jsx)(n.code,{children:"NODE_ENV=production npm install"})," then your ",(0,t.jsx)(n.code,{children:"devDependencies"})," will not be installed) and we have found that for React Native projects, it's best not to overload it further for this use case."]}),"\n",(0,t.jsxs)(n.p,{children:["If you use EAS, consider using ",(0,t.jsx)(n.code,{children:"eas env:pull"})," instead. This will swap your ",(0,t.jsx)(n.strong,{children:".env.local"})," with an environment of your choice, rather than depending on ",(0,t.jsx)(n.code,{children:"NODE_ENV"}),". You can accomplish a similar behavior without EAS by writing a script to overwrite ",(0,t.jsx)(n.strong,{children:".env.local"})," or ",(0,t.jsx)(n.strong,{children:".env"})," with the appropriate contents for the environment you wish to work with."]}),"\n",(0,t.jsx)(n.h3,{id:"disabling-environment-variables",children:"Disabling environment variables"}),"\n",(0,t.jsx)(n.p,{children:"Environment variables in Expo CLI have two parts and both can be disabled:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Expo CLI automatically loads the ",(0,t.jsx)(n.strong,{children:".env"})," files into the global process. To disable this behavior, set the environment variable ",(0,t.jsx)(n.code,{children:"EXPO_NO_DOTENV"})," to ",(0,t.jsx)(n.code,{children:"1"})," before running any Expo CLI command: ",(0,t.jsx)(n.code,{children:"EXPO_NO_DOTENV=1"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Expo's Metro config includes the inline serialization of environment variables in the client JavaScript bundle. To disable this behavior, you can use ",(0,t.jsx)(n.code,{children:"EXPO_NO_CLIENT_ENV_VARS=1"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you're experiencing issues with environment variables, you can try disabling one or both of these features."}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables-in-expo-application-services",children:"Environment variables in Expo Application Services"}),"\n",(0,t.jsx)(n.h3,{id:"eas-build",children:"EAS Build"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/../../../../../../../build/introduction",children:"EAS Build"})," uses Metro Bundler to build the JavaScript bundle embedded within your app binary, so it will use ",(0,t.jsx)(n.strong,{children:".env"})," files uploaded with your build job to inline ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," variables into your code. EAS Build also lets you define environment variables within build profiles in ",(0,t.jsx)(n.strong,{children:"eas.json"})," and via EAS Secrets. Check out the EAS Build documentation on ",(0,t.jsx)(n.a,{href:"/../../../../../../../build-reference/variables",children:"environment variables and build secrets"})," for more information."]}),"\n",(0,t.jsx)(n.h3,{id:"eas-update",children:"EAS Update"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/../../../../../../../eas-update/introduction",children:"EAS Update"})," uses Metro Bundler in your local environment or CI to build your app bundle, so it will use available ",(0,t.jsx)(n.strong,{children:".env"})," files to inline ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," variables into your code. Check out the EAS Update documentation on ",(0,t.jsx)(n.a,{href:"/../../../../../../../eas-update/environment-variables",children:"environment variables"})," for more information."]}),"\n",(0,t.jsx)(n.h2,{id:"migrating-to-expo-environment-variables",children:"Migrating to Expo environment variables"}),"\n",(0,t.jsx)(n.h3,{id:"from-react-native-config",children:"From react-native-config"}),"\n",(0,t.jsxs)(n.p,{children:["Update your ",(0,t.jsx)(n.strong,{children:".env"})," files to prefix any variables used within your JavaScript code with ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"@@@.env@@@- API_URL=https://myapi.com\n+ EXPO_PUBLIC_API_URL=https://myapi.com\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["If you have any non-standard ",(0,t.jsx)(n.strong,{children:".env"})," files (for example, ",(0,t.jsx)(n.strong,{children:".env.staging"}),"), you will need to migrate those to one of the ",(0,t.jsx)(n.a,{href:"https://github.com/bkeepers/dotenv/blob/c6e583a/README.md#what-other-env-files-can-i-use",children:"standard .env files"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Then update your code to use ",(0,t.jsx)(n.code,{children:"process.env.EXPO_PUBLIC_[VARNAME]"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"- import Config from 'react-native-config';\n\n- const apiUrl = Config.API_URL;\n+ const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"from-babel-plugin-transform-inline-environment-variables",children:"From babel-plugin-transform-inline-environment-variables"}),"\n",(0,t.jsxs)(n.p,{children:["Using a Babel plugin to transform your environment variable references in your code is similar to how Expo environment variables work. Set your variables inside a ",(0,t.jsx)(n.strong,{children:".env"})," file and update your variable names to use the ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," prefix:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"- const apiUrl = process.env.API_URL;\n+ const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then you can remove the plugin from your ",(0,t.jsx)(n.a,{href:"/../../../../../../../versions/latest/config/babel",children:"Babel config"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"@@@babel.config.js@@@module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n--    plugins: ['transform-inline-environment-variables'],\n  };\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After updating your Babel config file, be sure to clear your cache with ",(0,t.jsx)(n.code,{children:"npx expo start --clear"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"from-direnv",children:"From direnv"}),"\n",(0,t.jsxs)(n.p,{children:["Move any environment variables used in your JavaScript from their ",(0,t.jsx)(n.strong,{children:".envrc"})," file to a ",(0,t.jsx)(n.strong,{children:".env"})," file and prefix it with ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Previously with ",(0,t.jsx)(n.code,{children:"direnv"}),", you would need to use a ",(0,t.jsx)(n.a,{href:"/../../../../../../../versions/latest/config/app/#app-config",children:"dynamic app config"})," that reads from ",(0,t.jsx)(n.a,{href:"https://nodejs.org/dist/latest/docs/api/process.html#process_process_env",children:(0,t.jsx)(n.code,{children:"process.env"})})," to set environment variables on the ",(0,t.jsx)(n.code,{children:"extra"})," field so they can be used in your JavaScript code via ",(0,t.jsx)(n.a,{href:"/../../../../../../../versions/latest/sdk/constants",children:(0,t.jsx)(n.code,{children:"expo-constants"})}),". Move those references directly into your code, adding the ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"})," prefix:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"- import Constants from 'expo-constants';\n\n- const apiUrl = Constants.expoConfig.extra.apiUrl;\n+ const apiUrl = process.env.EXPO_PUBLIC_API_URL;\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://direnv.net/",children:(0,t.jsx)(n.code,{children:"direnv"})})," automatically loads and unloads environment variables in your shell depending on your current directory, meaning it can affect the environment for any process running in that directly, not just the Expo CLI. You will likely want to continue using ",(0,t.jsx)(n.code,{children:"direnv"})," for other environment variables that are not used in your JavaScript code."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security considerations"}),"\n",(0,t.jsxs)(n.p,{children:["Never store sensitive secrets in environment variables that are prefixed with ",(0,t.jsx)(n.code,{children:"EXPO_PUBLIC_"}),". When an end-user runs your app, they have access to all of the code and embedded environment variables in your app. Read more about ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/security#storing-sensitive-info",children:"storing sensitive info"}),"."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},15234:(e,n,i)=>{"use strict";Object.defineProperty(n,Symbol.toStringTag,{value:"Module"});let t=i(14232),r=i(71894),o=function(e){let n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let i in e)if("default"!==i){let t=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(n,i,t.get?t:{enumerable:!0,get:()=>e[i]})}}return n.default=e,Object.freeze(n)}(t);function s({className:e,...n}){let i=r.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return o.createElement("svg",{fill:"none",viewBox:"0 0 24 24",className:i,role:"img",...n},o.createElement("g",{id:"status-success-custom-icon"},o.createElement("path",{id:"Subtract",fill:"currentColor",fillRule:"evenodd",d:"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM10.6605 13.4142L8.56759 11.3212C8.17707 10.9307 7.54391 10.9307 7.15338 11.3212C6.76286 11.7118 6.76286 12.3449 7.15338 12.7354L9.95342 15.5355C10.3439 15.926 10.9771 15.926 11.3676 15.5355L17.0245 9.87862C17.415 9.4881 17.415 8.85493 17.0245 8.46441C16.634 8.07388 16.0008 8.07388 15.6103 8.46441L10.6605 13.4142Z",clipRule:"evenodd"})))}s.displayName="StatusSuccessIcon",n.StatusSuccessIcon=s},31378:(e,n,i)=>{"use strict";Object.defineProperty(n,Symbol.toStringTag,{value:"Module"});let t=i(14232),r=i(71894),o=function(e){let n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let i in e)if("default"!==i){let t=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(n,i,t.get?t:{enumerable:!0,get:()=>e[i]})}}return n.default=e,Object.freeze(n)}(t);function s({className:e,...n}){let i=r.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return o.createElement("svg",{viewBox:"0 0 24 24",fill:"currentColor",className:i,role:"img",...n},o.createElement("g",{id:"alert-circle-solid-icon"},o.createElement("path",{id:"Solid",fillRule:"evenodd",d:"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8V12C11 12.5523 11.4477 13 12 13C12.5523 13 13 12.5523 13 12V8ZM12 15C11.4477 15 11 15.4477 11 16C11 16.5523 11.4477 17 12 17H12.01C12.5623 17 13.01 16.5523 13.01 16C13.01 15.4477 12.5623 15 12.01 15H12Z",clipRule:"evenodd"})))}s.displayName="AlertCircleSolidIcon",n.AlertCircleSolidIcon=s},41483:(e,n,i)=>{"use strict";Object.defineProperty(n,Symbol.toStringTag,{value:"Module"});let t=i(14232),r=i(71894),o=function(e){let n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let i in e)if("default"!==i){let t=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(n,i,t.get?t:{enumerable:!0,get:()=>e[i]})}}return n.default=e,Object.freeze(n)}(t);function s({className:e,...n}){let i=r.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return o.createElement("svg",{fill:"none",viewBox:"0 0 24 24",className:i,role:"img",...n},o.createElement("g",{id:"status-failure-custom-icon"},o.createElement("path",{id:"Subtract",fill:"currentColor",fillRule:"evenodd",d:"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM8.46446 15.5355C8.07394 15.145 8.07394 14.5118 8.46446 14.1213L10.5858 11.9999L8.46447 9.87862C8.07394 9.4881 8.07395 8.85493 8.46447 8.46441C8.85499 8.07388 9.48816 8.07388 9.87868 8.46441L12 10.5857L14.1213 8.46441C14.5118 8.07388 15.145 8.07388 15.5355 8.46441C15.9261 8.85493 15.9261 9.4881 15.5355 9.87862L13.4142 11.9999L15.5355 14.1213C15.9261 14.5118 15.9261 15.145 15.5355 15.5355C15.145 15.926 14.5118 15.926 14.1213 15.5355L12 13.4142L9.87868 15.5355C9.48815 15.926 8.85499 15.926 8.46446 15.5355Z",clipRule:"evenodd"})))}s.displayName="StatusFailureIcon",n.StatusFailureIcon=s},50118:(e,n,i)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/environment-variables",function(){return i(5705)}])},66961:(e,n,i)=>{"use strict";i.d(n,{_0:()=>x,xf:()=>c,tU:()=>h,id:()=>p,jp:()=>l});var t=i(37876),r=i(15234),o=i(66028);let s=e=>{let{className:n,small:i,Icon:r,...s}=e;return r?(0,t.jsx)(r,{className:(0,o.mergeClasses)("inline-block",i?"icon-sm":"icon-md","text-icon-default","[li_&]:-mt-0.5 [li_&]:align-middle [table_&]:align-middle",n),...s}):null},l=e=>{let{small:n}=e;return(0,t.jsx)(s,{Icon:r.StatusSuccessIcon,className:"text-icon-success",small:n})};var a=i(41483);let c=e=>{let{small:n}=e;return(0,t.jsx)(s,{Icon:a.StatusFailureIcon,className:"text-icon-danger",small:n})};var d=i(73822);let h=e=>{let{small:n}=e;return(0,t.jsx)(s,{Icon:d.StatusWaitingIcon,className:"text-icon-warning",small:n})};var u=i(90218);let p=e=>{let{small:n}=e;return(0,t.jsx)(s,{Icon:u.AlertTriangleSolidIcon,className:"text-icon-warning",small:n})};var v=i(31378);let x=e=>{let{small:n}=e;return(0,t.jsx)(s,{Icon:v.AlertCircleSolidIcon,className:"text-icon-warning",small:n})}},73822:(e,n,i)=>{"use strict";Object.defineProperty(n,Symbol.toStringTag,{value:"Module"});let t=i(14232),r=i(71894),o=function(e){let n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let i in e)if("default"!==i){let t=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(n,i,t.get?t:{enumerable:!0,get:()=>e[i]})}}return n.default=e,Object.freeze(n)}(t);function s({className:e,...n}){let i=r.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return o.createElement("svg",{fill:"none",viewBox:"0 0 24 24",className:i,role:"img",...n},o.createElement("g",{id:"status-waiting-custom-icon"},o.createElement("path",{id:"Subtract",fill:"currentColor",fillRule:"evenodd",d:"M12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 13C11.4477 13 11 12.5523 11 12V7C11 6.44772 11.4477 6 12 6C12.5523 6 13 6.44772 13 7V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H12Z",clipRule:"evenodd"})))}s.displayName="StatusWaitingIcon",n.StatusWaitingIcon=s}},e=>{var n=n=>e(e.s=n);e.O(0,[90636,46593,38792],()=>n(50118)),_N_E=e.O()}]);
